@misc{RE,
	title = {What \& {Why} · {Reason}},
	url = {https://reasonml.github.io/docs/en/what-and-why},
	abstract = {\#\# What Is Reason?},
	year = {2020},
	urldate = {2020-12-22},
}

@book{DB,
	address = {Reading, Mass},
	title = {Compilers, principles, techniques, and tools},
	isbn = {9780201100884},
	publisher = {Addison-Wesley Pub. Co},
	author = {Aho, Alfred V. and Sethi, Ravi and Ullman, Jeffrey D.},
	year = {1986},
	keywords = {Compilers (Computer programs)},
}

@manual{ME,
	author = {Fran{\c c}̧ois Pottier and Yann R{\'e}gis-Gianas},
	edition = {version 20201216},
	url = {http://gallium.inria.fr/~fpottier/menhir/manual.pdf},
	month = {12},
	organization = {INRIA},
	title = {Menhir Reference Manual},
	year = {2020}
}

@misc{WE,
	title = {What is {ReasonML}?},
	year = {2017},
	author = {Dr. Axel Rauschmayer},
	url = {https://2ality.com/2017/11/about-reasonml.html},
	urldate = {2020-12-22},
}

@software{mer,
        title = {ocaml/merlin},
        rights = {{MIT}},
        url = {https://github.com/ocaml/merlin},
        abstract = {Context sensitive completion for {OCaml} in Vim and Emacs},
        publisher = {{OCaml}},
        urldate = {2022-08-04},
        date = {2022-08-02},
        keywords = {atom, emacs, ocaml, vim},
}

@inproceedings{LRSpeed,
	author = {Chen, Xin and Pager, David},
	title = {Full LR(1) Parser Generator Hyacc and Study on the Performance of LR(1) Algorithms},
	year = {2011},
	isbn = {9781450306263},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1992896.1992907},
	doi = {10.1145/1992896.1992907},
	abstract = {Despite the popularity of LALR(1) parser generators such as Yacc/Bison and LL parser generators such as ANTLR, robust and effective LR(1) parser generators are rare due to expensive performance and implementation difficulty. This work employed relevant algorithms, including the Knuth canonical algorithm, Pager's practical general method, lane-tracing algorithm, unit production elimination algorithm and its extension, and the edge-pushing algorithm, implemented an efficient, practical and Yacc/Bison-compatible open-source parser generator Hyacc, which supports full LR(0)/LALR(1)/LR(1) and partial LR(k). Based on the implementation, an empirical study was conducted comparing different LR(1) parser generation algorithms and LALR(1) algorithms. The result shows that LR(1) parser generation based upon improved algorithms and carefully selected data structures can be sufficiently efficient to be of practical use with modern computing facilities.},
	booktitle = {Proceedings of The Fourth International C* Conference on Computer Science and Software Engineering},
	pages = {83–92},
	numpages = {10},
	keywords = {parser generator, LR(1), Hyacc, algorithm, performance},
	location = {Montreal, Quebec, Canada},
	series = {C3S2E '11}
}

@online{ocamlyacc,
	title = {{OCaml} - Lexer and parser generators (ocamllex, ocamlyacc)},
	url = {https://v2.ocaml.org/manual/lexyacc.html},
	urldate = {2022-08-16},
	file = {OCaml - Lexer and parser generators (ocamllex, ocamlyacc):/Users/suslov/Zotero/storage/KVYTDAEA/lexyacc.html:text/html},
}
